Платформа "Недвижимость 4.0" 

Ты – опытный backend-архитектор (15+ лет продакшн-проектов, high-load и data-driven системы).
Тебе нужно спроектировать и накидать стартовый код (worker + инфраструктура)
для модуля динамического ценообразования в MVP «Недвижимость 4.0».

==================== Контекст проекта ====================
• Фронтенд уже есть: NestJS + TypeScript,
  Redis, микросервисная схема.

• Авторизация через bearer (access и refresh) токен 

• Нужен бекенд на Python, FastAPI, PostgreSQL, Pygantic, SQLModel, Alembic.
• Всё завернуто в Docker-Compose
• Глобально на платформе есть 3 типа ролей: пользователь (users), зайстройщик (developers) и ассоциация застройщиков
• Приложением будет управлять ассоциация застройщиков, они же являются администраторами и модерируют весь контент
• Каталог квартир хранится в таблице *apartments*
  (поля id, base_price, current_price, status, created_at, …).
• Иерархия сущностей от самой большой (Застройщик) до самой маленькой (квартира) такая: developers -> projects -> buildings -> apartments:
• Раз в минуту у нас есть *агрегаты* за 24 ч — views_t24h, leads_t24h,
  bookings_t24h, days_on_site (храним в materialized view или Redis).

Возможности Для покупателей:

- Цифровая карта России – интерактивная карта с новостройками, фильтрами (регион, цена, срок сдачи, класс жилья).
Каталог проектов – полная информация о ЖК (фото, видео, 3D-туры от Avalin, планировки).

- ИИ-подбор квартир – чат-бот помогает выбрать оптимальный вариант по бюджету, локации, планировке.
- Динамическое ценообразование – алгоритм меняет цены в зависимости от спроса (как в авиабилетах).
- Акции и скидки – эксклюзивные предложения (например, 5% скидка при покупке через платформу).
- Онлайн-бронирование – без риелторов, прямое взаимодействие с застройщиком.


Возможности Для застройщиков:

- Личный кабинет с CRM – управление объектами, бронированиями, документами.
- Интеграция с текущими CRM (например, Битрикс24, AMO CRM).
- Аналитика спроса – какие квартиры пользуются популярностью, какие цены оптимальны.
- Автоматическое обновление остатков – синхронизация с внутренними базами застройщика.

Возможности Для ассоциации застройщиков:

- Модерация контента – проверка достоверности данных
- Контроль сделок – прозрачность и защита от мошенничества.
- Аналитика рынка – отчеты по регионам, спросу, ценам.



==================== Алгоритм, который нужно реализовать ====================
1. Для каждого лота каждую минуту получаем агрегаты:
   *views, favorites, leads, bookings, days_on_site*.

2. Считаем demand_score:
      demand = 0.5·views_t24h + 2·leads_t24h + 5·bookings_t24h  
      demand_norm = demand / median_demand_in_cluster
   (cluster = квартиры того же проекта и того же типа комнат).

3. Решаем, как менять цену:
   if demand_norm > 1.3                 → price_change = +Δ%  
   elif demand_norm < 0.7 and days_on_site > 14 → price_change = –Δ%  
   else                                 → price_change = 0  
   где Δ% = min(3 %, elasticity_cap).

4. Ограничители:
   • итоговая надбавка/скидка не должна выйти за ±7 % от base_price;  
   • не чаще 1 раза в 24 ч для конкретного лота;  
   • если была бронь < 24 ч назад — цену не трогаем.

5. После изменения пишем запись в *price_history*
   и выдаём readable-лог вида  
   «Цена изменилась +2 % из-за высокого спроса (34 просмотра за 24 ч)».

==================== Сущности таблиц ====================

1. Пользователи (users)
Храним аккаунты всех ролей. Поля: id, email (уникальный), password_hash, role (ENUM: buyer, developer, moderator), display_name, phone, created_at, updated_at.

2. Застройщики (developers)
Карточка юр-лица-застройщика: id, name, legal_name, inn, ogrn, logo_url, website, verified (BOOLEAN), created_at.

3. Проекты / ЖК (projects)
Верхний уровень каталога: id, developer_id (FK), name, city, region_code (ISO-3166-2), address, geo (POINT), class (ENUM: econom, comfort, business, premium), commissioning_date (DATE), cover_image_url, description, created_at.

4. Корпуса (buildings)
Позволяет разделить очереди/секции: id, project_id (FK), name, number, sections (INT), floors (INT), commissioning_quarter (SMALLINT), commissioning_year (SMALLINT), created_at.

5. Квартиры (apartments)
Главная витрина: id, building_id (FK), code (внутренний артикул), floor, rooms, area_total, area_living, area_kitchen, ceiling_height, balcony (BOOLEAN), layout_image_url, base_price, current_price, currency (по умолчанию RUB), status (ENUM: available, booked, sold), tour_url, created_at, updated_at.
Если нужно хранить дополнительные атрибуты («отделка», «вид из окна») ― добавьте поле extra JSONB.

6. История цен (price_history)
Все изменения стоимости для отката и аналитики: id, apartment_id (FK), changed_at, old_price, new_price, reason (ENUM: dynamic, manual, promo).

7. Логи интереса (views_log)
Сырые события, на которых строится динамический прайс: id, apartment_id (FK), user_id (FK, опционально), event (ENUM: view, favourite), occurred_at.

8. Агрегаты спроса (apartment_stats)
Подготовленные показатели «просмотры/бронирования за 24 ч» для быстрого расчёта цены: apartment_id (PK), views_24h, bookings_24h, updated_at.

9. Бронирования (bookings)
Онлайн-брони: id, apartment_id (FK), user_id (FK), status (ENUM: pending, confirmed, cancelled, expired), booked_at, expires_at, crm_external_id (если пришёл ответ от amo/Bitrix24).

10. Акции/скидки (promotions) необязательно, но пригодится
id, name, discount_percent, starts_at, ends_at, conditions JSONB (например, «только для студий > 25 м²»).

11. Входящие вебхуки от CRM (webhook_inbox)
Храним всё, что прилетело, чтобы можно было переобработать: id, source (строка «amo», «bitrix» и т. д.), payload JSONB, received_at, processed (BOOLEAN).

12. Конфиг динамического ценообразования (dynamic_pricing_config)
Позволяет менять коэффициенты без деплоя: id, k1, k2, enabled (BOOLEAN), created_at.



==================== Что нужно от тебя ====================
A. Создать таблицы сущностей и миграции через Alembic.
Дополни базу дополнительными сущностями и дополнительными полями в сущностях, если в этом есть необходимость

B. Алгоритм динамического ценообразования


C. Конфиги и инфра:
   1. Фрагмент docker-compose.yaml (fastapi_app, postgresql).  
   2. Пример переменных .env (ELASTICITY_CAP, PRICE_MAX_SHIFT, …).
   3. Используй docker secrets для хранения пароля от базы. Пароль будет храниться в файле db_password.txt
   4. Подробная автогенерируемая документация с описнанием полей через openAPI


D. README-шаги:
   •  Отисание проекта на русском со смайликами

   • как запустить приложение через docker-compose локально
    • Как перейти на старницу с автоматической документацией swager

Оформление ответа:
Используй говорящие имена переменных и функций. Если повередние функции или переменной понятно из контекста, не используй комментарии. Будь лаконичен, без лишней «воды»,
но так, чтобы я сразу разобрался как junior, скопировал и вставил в репу.
