import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  ActivityIndicator,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { getAISuggestions } from '@/lib/ai-service';
import type { Property } from '@/lib/types';
import { Card } from './Cards';
import { router } from 'expo-router';

const AIAssistant = () => {
  const [query, setQuery] = useState('');
  const [suggestions, setSuggestions] = useState<Property[]>([]);
  const [loading, setLoading] = useState(false);
  const [hasSearched, setHasSearched] = useState(false);

  const handleSearch = async () => {
    if (!query.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å');
      return;
    }

    setLoading(true);
    try {
      const results = await getAISuggestions(query);
      setSuggestions(results);
      setHasSearched(true);
    } catch (error: any) {
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
      console.error('AI suggestions error:', error);
    } finally {
      setLoading(false);
    }
  };

  const renderSuggestion = ({ item }: { item: Property }) => (
    <Card 
      item={item} 
      onPress={() => {
        router.push(`/properties/${item.$id}`);
      }}
    />
  );

  const exampleQueries = [
    "–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ –¥–æ 6 –º–ª–Ω ‚ÇΩ",
    "–°—Ç—É–¥–∏—è –≤ –°–æ—á–∏ —Ä—è–¥–æ–º —Å –º–æ—Ä–µ–º",
    "–¢—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ –°–ü–±",
    "–≠–ª–∏—Ç–Ω–æ–µ –∂–∏–ª—å–µ –≤ –ú–æ—Å–∫–≤–µ —Å –ø–∞—Ä–∫–∏–Ω–≥–æ–º"
  ];

  const handleExamplePress = (example: string) => {
    setQuery(example);
  };

  return (
    <SafeAreaView className="flex-1 bg-white">
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        className="flex-1"
      >
        <View className="px-5 pt-5">
          <Text className="text-2xl font-rubik-bold text-black-300 mb-2">
            –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫
          </Text>
          <Text className="text-base font-rubik text-black-200 mb-5">
            –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤—ã –∏—â–µ—Ç–µ, –∏ –ò–ò –ø–æ–¥–±–µ—Ä–µ—Ç –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
          </Text>

          <View className="mb-5">
            <Text className="text-sm font-rubik-medium text-black-300 mb-2">
              –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
            </Text>
            <View className="flex-row flex-wrap gap-2">
              {exampleQueries.map((example, index) => (
                <TouchableOpacity
                  key={index}
                  onPress={() => handleExamplePress(example)}
                  className="bg-primary-100 px-3 py-2 rounded-full"
                >
                  <Text className="text-xs font-rubik text-primary-300">
                    {example}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          <View className="flex-row gap-3 mb-5">
            <TextInput
              value={query}
              onChangeText={setQuery}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–î–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ –¥–æ 6 –º–ª–Ω ‚ÇΩ'"
              multiline
              className="flex-1 border border-primary-200 rounded-xl px-4 py-3 font-rubik text-black-300 min-h-[100px]"
              textAlignVertical="top"
            />
          </View>

          <TouchableOpacity
            onPress={handleSearch}
            disabled={loading}
            className={`bg-primary-300 rounded-xl py-4 mb-5 ${loading ? 'opacity-50' : ''}`}
          >
            {loading ? (
              <View className="flex-row items-center justify-center">
                <ActivityIndicator color="white" size="small" />
                <Text className="text-white text-center font-rubik-medium text-lg ml-2">
                  –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å...
                </Text>
              </View>
            ) : (
              <Text className="text-white text-center font-rubik-medium text-lg">
                ü§ñ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò
              </Text>
            )}
          </TouchableOpacity>
        </View>

        {hasSearched && (
          <View className="flex-1 px-5">
            <Text className="text-xl font-rubik-bold text-black-300 mb-4">
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò ({suggestions.length})
            </Text>

            {suggestions.length === 0 ? (
              <View className="flex-1 justify-center items-center">
                <Text className="text-lg font-rubik text-black-200 text-center">
                  –ò–ò –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.{'\n'}
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏{'\n'}
                  –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã—à–µ.
                </Text>
              </View>
            ) : (
              <FlatList
                data={suggestions}
                renderItem={renderSuggestion}
                keyExtractor={(item) => item.$id}
                numColumns={2}
                columnWrapperStyle={{ gap: 16 }}
                contentContainerStyle={{ gap: 16, paddingBottom: 100 }}
                showsVerticalScrollIndicator={false}
              />
            )}
          </View>
        )}

        {!hasSearched && (
          <View className="flex-1 justify-center items-center px-5">
            <Text className="text-lg font-rubik text-black-200 text-center mb-4">
              ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏{'\n'}
              –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –ø–æ–¥ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã
            </Text>
            <Text className="text-sm font-rubik text-black-100 text-center">
              –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ, –∏ –ò–ò{'\n'}
              —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            </Text>
          </View>
        )}
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

export default AIAssistant; 